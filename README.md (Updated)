# CalmBot - Refactored

A feature-rich Discord bot with improved architecture, reduced complexity, and comprehensive testing.

## 🏗️ Architecture Improvements

### Code Organization
- **Separation of Concerns**: Business logic moved to service classes
- **Data Models**: Structured data classes for type safety
- **Centralized Storage**: Unified JSON file management
- **Permission System**: Reusable permission checking
- **Validation Layer**: Input validation utilities

### Complexity Reduction
- **Smaller Functions**: Large functions broken into focused methods
- **Reduced If Statements**: Early returns and validation extraction
- **Error Handling**: Centralized error handling patterns
- **Type Safety**: Full type hints for better IDE support

## 🧪 Testing

### Running Tests
```bash
# Install development dependencies
pip install -r requirements-dev.txt

# Run all tests
pytest

# Run with coverage
pytest --cov=src

# Run specific test file
pytest tests/test_permissions.py
```

### Test Coverage
- Unit tests for core utilities
- Service layer testing
- Permission system validation
- Storage functionality
- Input validation

## 📁 Project Structure

```
src/
├── core/           # Core functionality (storage, permissions)
├── cogs/           # Discord command handlers
├── services/       # Business logic
├── models/         # Data structures
└── utils/          # Utility functions

tests/
├── test_services/  # Service layer tests
├── test_cogs/      # Command handler tests
└── conftest.py     # Test configuration
```

## 🚀 Installation

1. **Clone and install**
   ```bash
   git clone <repository-url>
   cd discord-bot
   pip install -r requirements.txt
   ```

2. **Configuration**
   ```python
   # config.py
   GUILD_IDS = [YOUR_GUILD_ID_HERE]
   BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
   AMP_API_URL = "http://your-amp-server:port"
   AMP_USER = "your_amp_username"
   AMP_PASS = "your_amp_password"
   ```

3. **Run the bot**
   ```bash
   python -m src.main
   ```

## 🔧 Development

### Code Quality
```bash
# Format code
black src/ tests/

# Lint code
flake8 src/ tests/

# Type checking
mypy src/
```

### Adding Features
1. Create data models in `src/models/`
2. Implement business logic in `src/services/`
3. Add command handlers in `src/cogs/`
4. Write tests in `tests/`

## 📝 Key Improvements

### Before vs After

**Before**: 200+ line functions with nested if statements
**After**: Focused 20-30 line functions with single responsibilities

**Before**: Inline permission checks and validation
**After**: Centralized permission and validation systems

**Before**: No tests, manual verification only
**After**: Comprehensive test suite with 80%+ coverage

**Before**: Scattered storage logic
**After**: Unified storage management with error handling

## 🎯 Commands

All original commands remain the same:
- `/amp` - AMP server management
- `/autosend` - Message automation
- `/setup_modpack` - Modpack category creation
- `/delete_modpack` - Modpack removal
- `/roles_board` - Role management interface

## 📄 License

This project is provided as-is for educational and personal use.